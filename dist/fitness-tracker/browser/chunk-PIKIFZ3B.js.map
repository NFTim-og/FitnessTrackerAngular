{
  "version": 3,
  "sources": ["src/app/pages/auth/register/register.component.ts", "src/app/pages/auth/register/register.component.html"],
  "sourcesContent": ["import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from '../../../services/auth.service';\n\n@Component({\n  selector: 'app-register',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule],\n  templateUrl: './register.component.html'\n})\nexport class RegisterComponent {\n  registerForm: FormGroup;\n  isLoading = false;\n  error = '';\n\n  constructor(\n    private fb: FormBuilder,\n    private authService: AuthService,\n    private router: Router\n  ) {\n    this.registerForm = this.fb.group({\n      email: ['', [Validators.required, Validators.email]],\n      password: ['', [\n        Validators.required,\n        Validators.minLength(8),\n        Validators.pattern(/.*\\d.*/) // At least one number\n      ]],\n      passwordConfirmation: ['', [Validators.required]]\n    }, {\n      validators: this.passwordMatchValidator\n    });\n  }\n\n  // Custom validator to check if password and confirmation match\n  passwordMatchValidator(form: FormGroup) {\n    const password = form.get('password')?.value;\n    const passwordConfirmation = form.get('passwordConfirmation')?.value;\n\n    if (password === passwordConfirmation) {\n      return null;\n    }\n\n    return { passwordMismatch: true };\n  }\n\n  showError(field: string) {\n    const control = this.registerForm.get(field);\n    return control?.invalid && (control?.dirty || control?.touched);\n  }\n\n  onSubmit() {\n    if (this.registerForm.invalid) return;\n\n    this.isLoading = true;\n    this.error = '';\n\n    this.authService.register(\n      this.registerForm.value.email,\n      this.registerForm.value.password,\n      this.registerForm.value.passwordConfirmation\n    ).subscribe({\n      next: () => {\n        this.router.navigate(['/']);\n      },\n      error: (error: any) => {\n        this.error = error.message || 'An error occurred during registration';\n        this.isLoading = false;\n      },\n      complete: () => {\n        this.isLoading = false;\n      }\n    });\n  }\n}", "<div class=\"min-h-[80vh] flex items-center justify-center\">\n    <div class=\"max-w-md w-full\">\n      <h1 class=\"text-3xl font-bold text-center mb-8\">Create Account</h1>\n\n      <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\" class=\"card\">\n        <div class=\"form-group\">\n          <label for=\"email\" class=\"form-label\">Email</label>\n          <input\n            type=\"email\"\n            id=\"email\"\n            formControlName=\"email\"\n            class=\"form-control\"\n            [class.border-red-500]=\"showError('email')\"\n          />\n          @if (showError('email')) {\n            <p class=\"text-red-500 text-sm mt-1\">Please enter a valid email</p>\n          }\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"password\" class=\"form-label\">Password</label>\n          <input\n            type=\"password\"\n            id=\"password\"\n            formControlName=\"password\"\n            class=\"form-control\"\n            [class.border-red-500]=\"showError('password')\"\n          />\n          @if (showError('password')) {\n            <p class=\"text-red-500 text-sm mt-1\">\n              Password must be at least 8 characters and contain at least one number\n            </p>\n          }\n        </div>\n\n        <div class=\"form-group\">\n          <label for=\"passwordConfirmation\" class=\"form-label\">Confirm Password</label>\n          <input\n            type=\"password\"\n            id=\"passwordConfirmation\"\n            formControlName=\"passwordConfirmation\"\n            class=\"form-control\"\n            [class.border-red-500]=\"showError('passwordConfirmation') || registerForm.hasError('passwordMismatch')\"\n          />\n          @if (showError('passwordConfirmation')) {\n            <p class=\"text-red-500 text-sm mt-1\">\n              Please confirm your password\n            </p>\n          }\n          @if (registerForm.hasError('passwordMismatch') && !showError('passwordConfirmation') && registerForm.get('passwordConfirmation')?.touched) {\n            <p class=\"text-red-500 text-sm mt-1\">\n              Passwords do not match\n            </p>\n          }\n        </div>\n\n        @if (error) {\n          <div class=\"text-red-500 text-sm mb-4\">{{ error }}</div>\n        }\n\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary w-full\"\n          [disabled]=\"registerForm.invalid || isLoading\"\n        >\n          {{ isLoading ? 'Creating account...' : 'Create Account' }}\n        </button>\n      </form>\n    </div>\n  </div>"],
  "mappings": "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",
  "names": []
}
