{
  "version": 3,
  "sources": ["src/app/models/workout-plan.model.ts", "src/app/services/workout-plan.service.ts"],
  "sourcesContent": ["import { Exercise } from './exercise.model';\n\nexport class WorkoutExercise {\n  id: string = '';\n  workout_plan_id: string = '';\n  exercise_id: string = '';\n  order: number = 0;\n  exercise?: Exercise;\n\n  constructor(data: Partial<WorkoutExercise> = {}) {\n    this.id = data.id || '';\n    this.workout_plan_id = data.workout_plan_id || '';\n    this.exercise_id = data.exercise_id || '';\n    this.order = data.order || 0;\n    this.exercise = data.exercise ? new Exercise(data.exercise) : undefined;\n  }\n\n  static fromJSON(json: any): WorkoutExercise {\n    return new WorkoutExercise({\n      ...json,\n      exercise: json.exercise ? Exercise.fromJSON(json.exercise) : undefined\n    });\n  }\n}\n\nexport class WorkoutPlan {\n  id: string = '';\n  name: string = '';\n  description: string = '';\n  created_by: string = '';\n  created_at: string = new Date().toISOString();\n  updated_at: string = new Date().toISOString();\n  exercises?: WorkoutExercise[];\n\n  constructor(data: Partial<WorkoutPlan> = {}) {\n    this.id = data.id || '';\n    this.name = data.name || '';\n    this.description = data.description || '';\n    this.created_by = data.created_by || '';\n    this.created_at = data.created_at || new Date().toISOString();\n    this.updated_at = data.updated_at || new Date().toISOString();\n    this.exercises = data.exercises?.map(e => new WorkoutExercise(e));\n  }\n\n  static fromJSON(json: any): WorkoutPlan {\n    return new WorkoutPlan({\n      ...json,\n      exercises: json.exercises?.map((e: any) => WorkoutExercise.fromJSON(e))\n    });\n  }\n\n  toJSON(): Partial<WorkoutPlan> {\n    return {\n      name: this.name,\n      description: this.description\n    };\n  }\n\n  getExercises(): Exercise[] {\n    return this.exercises\n      ?.filter(we => we.exercise)\n      .map(we => we.exercise!)\n      .sort((a, b) => a.name.localeCompare(b.name)) || [];\n  }\n}", "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError, of } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { WorkoutPlan, WorkoutExercise } from '../models/workout-plan.model';\nimport { PaginationParams } from '../shared/models/pagination.model';\nimport { environment } from '../../environments/environment';\nimport { ErrorHandlerService } from '../shared/services/error-handler.service';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class WorkoutPlanService {\n  private apiUrl = `${environment.apiUrl}/workout-plans`;\n  private workoutPlansSubject = new BehaviorSubject<WorkoutPlan[]>([]);\n  private totalCountSubject = new BehaviorSubject<number>(0);\n  private currentParams: PaginationParams = { page: 1, perPage: 1 };\n\n  workoutPlans$ = this.workoutPlansSubject.asObservable();\n  totalCount$ = this.totalCountSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private errorHandler: ErrorHandlerService\n  ) {}\n\n  loadWorkoutPlans(params: PaginationParams): Observable<void> {\n    this.currentParams = params;\n\n    const httpParams = new HttpParams()\n      .set('page', params.page.toString())\n      .set('limit', params.perPage.toString())\n      .set('sortBy', params.sortBy || 'name')\n      .set('sortOrder', params.sortOrder || 'ASC');\n\n    console.log('WorkoutPlanService - Loading workout plans from:', `${this.apiUrl}`);\n    console.log('WorkoutPlanService - With params:', params);\n\n    // TEMPORARY: Use hardcoded dummy data instead of making an HTTP request\n    console.log('WorkoutPlanService - Using hardcoded dummy data');\n\n    // Create dummy workout plans\n    const dummyWorkoutPlans = [\n      WorkoutPlan.fromJSON({\n        id: '00000000-0000-0000-0000-000000000001',\n        name: 'Full Body Workout',\n        description: 'A complete workout targeting all major muscle groups',\n        created_by: '00000000-0000-0000-0000-000000000099',\n        exercises: [\n          {\n            id: '00000000-0000-0000-0000-000000000101',\n            workout_plan_id: '00000000-0000-0000-0000-000000000001',\n            exercise_id: '00000000-0000-0000-0000-000000000001',\n            order: 1,\n            exercise: {\n              id: '00000000-0000-0000-0000-000000000001',\n              name: 'Push-ups',\n              duration: 10,\n              calories: 100,\n              difficulty: 'medium',\n              met_value: 3.8,\n              created_by: '00000000-0000-0000-0000-000000000099'\n            }\n          },\n          {\n            id: '00000000-0000-0000-0000-000000000102',\n            workout_plan_id: '00000000-0000-0000-0000-000000000001',\n            exercise_id: '00000000-0000-0000-0000-000000000002',\n            order: 2,\n            exercise: {\n              id: '00000000-0000-0000-0000-000000000002',\n              name: 'Sit-ups',\n              duration: 10,\n              calories: 80,\n              difficulty: 'easy',\n              met_value: 3.0,\n              created_by: '00000000-0000-0000-0000-000000000099'\n            }\n          }\n        ]\n      }),\n      WorkoutPlan.fromJSON({\n        id: '00000000-0000-0000-0000-000000000002',\n        name: 'Upper Body Strength',\n        description: 'Focus on building upper body strength',\n        created_by: '00000000-0000-0000-0000-000000000099',\n        exercises: [\n          {\n            id: '00000000-0000-0000-0000-000000000201',\n            workout_plan_id: '00000000-0000-0000-0000-000000000002',\n            exercise_id: '00000000-0000-0000-0000-000000000001',\n            order: 1,\n            exercise: {\n              id: '00000000-0000-0000-0000-000000000001',\n              name: 'Push-ups',\n              duration: 10,\n              calories: 100,\n              difficulty: 'medium',\n              met_value: 3.8,\n              created_by: '00000000-0000-0000-0000-000000000099'\n            }\n          }\n        ]\n      }),\n      WorkoutPlan.fromJSON({\n        id: '00000000-0000-0000-0000-000000000003',\n        name: 'Core Strength',\n        description: 'Focus on building core strength',\n        created_by: '00000000-0000-0000-0000-000000000099',\n        exercises: [\n          {\n            id: '00000000-0000-0000-0000-000000000301',\n            workout_plan_id: '00000000-0000-0000-0000-000000000003',\n            exercise_id: '00000000-0000-0000-0000-000000000002',\n            order: 1,\n            exercise: {\n              id: '00000000-0000-0000-0000-000000000002',\n              name: 'Sit-ups',\n              duration: 10,\n              calories: 80,\n              difficulty: 'easy',\n              met_value: 3.0,\n              created_by: '00000000-0000-0000-0000-000000000099'\n            }\n          },\n          {\n            id: '00000000-0000-0000-0000-000000000302',\n            workout_plan_id: '00000000-0000-0000-0000-000000000003',\n            exercise_id: '00000000-0000-0000-0000-000000000005',\n            order: 2,\n            exercise: {\n              id: '00000000-0000-0000-0000-000000000005',\n              name: 'Plank',\n              duration: 5,\n              calories: 50,\n              difficulty: 'hard',\n              met_value: 4.0,\n              created_by: '00000000-0000-0000-0000-000000000099'\n            }\n          }\n        ]\n      })\n    ];\n\n    console.log('WorkoutPlanService - Dummy workout plans:', dummyWorkoutPlans);\n    this.workoutPlansSubject.next(dummyWorkoutPlans);\n    this.totalCountSubject.next(dummyWorkoutPlans.length);\n\n    return of(undefined).pipe(\n        map(() => {\n          // This is just a placeholder to maintain the Observable<void> return type\n        }),\n        catchError(error => {\n          console.error('WorkoutPlanService - Error loading workout plans:', error);\n          this.workoutPlansSubject.next([]);\n          this.totalCountSubject.next(0);\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.loadWorkoutPlans', true));\n        })\n      );\n  }\n\n  getWorkoutPlan(id: string): Observable<WorkoutPlan> {\n    return this.http.get<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(response => WorkoutPlan.fromJSON(response.data.workoutPlan)),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.getWorkoutPlan', true));\n        })\n      );\n  }\n\n  createWorkoutPlan(\n    workoutPlan: Omit<WorkoutPlan, 'id' | 'created_at' | 'created_by'>,\n    exercises: { exercise_id: string; order: number }[]\n  ): Observable<WorkoutPlan> {\n    const payload = {\n      name: workoutPlan.name,\n      description: workoutPlan.description,\n      exercises: exercises\n    };\n\n    return this.http.post<any>(`${this.apiUrl}`, payload)\n      .pipe(\n        map(response => {\n          this.loadWorkoutPlans(this.currentParams).subscribe();\n          return WorkoutPlan.fromJSON(response.data.workoutPlan);\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.createWorkoutPlan', true));\n        })\n      );\n  }\n\n  updateWorkoutPlan(\n    id: string,\n    workoutPlan: Partial<WorkoutPlan>,\n    exercises?: { exercise_id: string; order: number }[]\n  ): Observable<WorkoutPlan> {\n    const payload: any = {};\n\n    if (workoutPlan.name) {\n      payload.name = workoutPlan.name;\n    }\n\n    if (workoutPlan.description !== undefined) {\n      payload.description = workoutPlan.description;\n    }\n\n    if (exercises) {\n      payload.exercises = exercises;\n    }\n\n    return this.http.put<any>(`${this.apiUrl}/${id}`, payload)\n      .pipe(\n        map(response => {\n          this.loadWorkoutPlans(this.currentParams).subscribe();\n          return WorkoutPlan.fromJSON(response.data.workoutPlan);\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.updateWorkoutPlan', true));\n        })\n      );\n  }\n\n  deleteWorkoutPlan(id: string): Observable<void> {\n    return this.http.delete<any>(`${this.apiUrl}/${id}`)\n      .pipe(\n        map(() => {\n          this.loadWorkoutPlans(this.currentParams).subscribe();\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.deleteWorkoutPlan', true));\n        })\n      );\n  }\n\n  searchWorkoutPlans(query: string, params: PaginationParams): Observable<void> {\n    this.currentParams = params;\n\n    const httpParams = new HttpParams()\n      .set('page', params.page.toString())\n      .set('limit', params.perPage.toString())\n      .set('sortBy', params.sortBy || 'name')\n      .set('sortOrder', params.sortOrder || 'ASC')\n      .set('search', query);\n\n    return this.http.get<any>(`${this.apiUrl}`, { params: httpParams })\n      .pipe(\n        map(response => {\n          const workoutPlans = response.data.workoutPlans.map((wp: any) => WorkoutPlan.fromJSON(wp));\n          this.workoutPlansSubject.next(workoutPlans);\n          this.totalCountSubject.next(response.data.pagination.total);\n        }),\n        catchError(error => {\n          this.workoutPlansSubject.next([]);\n          this.totalCountSubject.next(0);\n          return throwError(() => this.errorHandler.handleError(error, 'WorkoutPlanService.searchWorkoutPlans', true));\n        })\n      );\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
