{
  "version": 3,
  "sources": ["src/app/models/user-profile.model.ts", "src/app/services/user-profile.service.ts"],
  "sourcesContent": ["export class UserProfile {\n  id: string;\n  user_id: string;\n  weight_kg: number | null;\n  height_cm: number | null;\n  created_at: Date;\n  updated_at: Date;\n\n  constructor(data: any) {\n    this.id = data.id;\n    this.user_id = data.user_id;\n    this.weight_kg = data.weight_kg;\n    this.height_cm = data.height_cm;\n    this.created_at = new Date(data.created_at);\n    this.updated_at = new Date(data.updated_at);\n  }\n\n  get bmi(): number | null {\n    if (!this.weight_kg || !this.height_cm) return null;\n    const heightInMeters = this.height_cm / 100;\n    return this.weight_kg / (heightInMeters * heightInMeters);\n  }\n\n  get bmiCategory(): string {\n    const bmi = this.bmi;\n    if (!bmi) return 'Unknown';\n    \n    if (bmi < 18.5) return 'Underweight';\n    if (bmi < 25) return 'Normal weight';\n    if (bmi < 30) return 'Overweight';\n    return 'Obese';\n  }\n}\n\nexport class WeightRecord {\n  id: string;\n  user_id: string;\n  weight_kg: number;\n  recorded_at: Date;\n\n  constructor(data: any) {\n    this.id = data.id;\n    this.user_id = data.user_id;\n    this.weight_kg = data.weight_kg;\n    this.recorded_at = new Date(data.recorded_at);\n  }\n}\n", "import { Injectable } from '@angular/core';\nimport { HttpClient, HttpParams } from '@angular/common/http';\nimport { BehaviorSubject, Observable, throwError } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport { environment } from '../../environments/environment';\nimport { ErrorHandlerService } from '../shared/services/error-handler.service';\nimport { UserProfile, WeightRecord } from '../models/user-profile.model';\nimport { PaginationParams } from '../shared/models/pagination.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserProfileService {\n  private apiUrl = `${environment.apiUrl}/profile`;\n  private profileSubject = new BehaviorSubject<UserProfile | null>(null);\n  private weightHistorySubject = new BehaviorSubject<WeightRecord[]>([]);\n  private totalWeightRecordsSubject = new BehaviorSubject<number>(0);\n\n  profile$ = this.profileSubject.asObservable();\n  weightHistory$ = this.weightHistorySubject.asObservable();\n  totalWeightRecords$ = this.totalWeightRecordsSubject.asObservable();\n\n  constructor(\n    private http: HttpClient,\n    private errorHandler: ErrorHandlerService\n  ) {\n    this.loadProfile();\n  }\n\n  loadProfile(): void {\n    this.getProfile().subscribe({\n      error: (error) => {\n        this.profileSubject.next(null);\n        this.errorHandler.handleError(error, 'UserProfileService.loadProfile');\n      }\n    });\n  }\n\n  getProfile(): Observable<UserProfile> {\n    console.log('UserProfileService - Getting profile from:', `${this.apiUrl}`);\n    return this.http.get<any>(`${this.apiUrl}`)\n      .pipe(\n        map(response => {\n          console.log('UserProfileService - Profile response:', response);\n          const profile = new UserProfile(response.data.profile);\n          this.profileSubject.next(profile);\n          return profile;\n        }),\n        catchError(error => {\n          console.error('UserProfileService - Error getting profile:', error);\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.getProfile'));\n        })\n      );\n  }\n\n  updateProfile(weight_kg: number, height_cm: number): Observable<UserProfile> {\n    return this.http.put<any>(`${this.apiUrl}`, { weight_kg, height_cm })\n      .pipe(\n        map(response => {\n          const profile = new UserProfile(response.data.profile);\n          this.profileSubject.next(profile);\n          return profile;\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.updateProfile'));\n        })\n      );\n  }\n\n  createProfile(weight_kg: number, height_cm: number): Observable<UserProfile> {\n    return this.http.post<any>(`${this.apiUrl}`, { weight_kg, height_cm })\n      .pipe(\n        map(response => {\n          const profile = new UserProfile(response.data.profile);\n          this.profileSubject.next(profile);\n          return profile;\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.createProfile'));\n        })\n      );\n  }\n\n  getWeightHistory(params: PaginationParams): Observable<void> {\n    const httpParams = new HttpParams()\n      .set('page', params.page.toString())\n      .set('limit', params.perPage.toString())\n      .set('sortOrder', params.sortOrder || 'DESC');\n\n    return this.http.get<any>(`${this.apiUrl}/weight`, { params: httpParams })\n      .pipe(\n        map(response => {\n          const weightHistory = response.data.weightHistory.map((w: any) => new WeightRecord(w));\n          this.weightHistorySubject.next(weightHistory);\n          this.totalWeightRecordsSubject.next(response.data.pagination.total);\n        }),\n        catchError(error => {\n          this.weightHistorySubject.next([]);\n          this.totalWeightRecordsSubject.next(0);\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.getWeightHistory'));\n        })\n      );\n  }\n\n  recordWeight(weight_kg: number): Observable<WeightRecord> {\n    return this.http.post<any>(`${this.apiUrl}/weight`, { weight_kg })\n      .pipe(\n        map(response => {\n          this.getWeightHistory({ page: 1, perPage: 10 }).subscribe();\n          return new WeightRecord(response.data.weightRecord);\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.recordWeight'));\n        })\n      );\n  }\n\n  deleteWeightRecord(id: string): Observable<void> {\n    return this.http.delete<any>(`${this.apiUrl}/weight/${id}`)\n      .pipe(\n        map(() => {\n          this.getWeightHistory({ page: 1, perPage: 10 }).subscribe();\n        }),\n        catchError(error => {\n          return throwError(() => this.errorHandler.handleError(error, 'UserProfileService.deleteWeightRecord'));\n        })\n      );\n  }\n\n  calculateCalories(metValue: number, durationMinutes: number): number {\n    const profile = this.profileSubject.value;\n    if (!profile || !profile.weight_kg) return 0;\n\n    // Formula: Calories = MET × Weight (kg) × Duration (hours)\n    const durationHours = durationMinutes / 60;\n    return Math.round(metValue * profile.weight_kg * durationHours);\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
