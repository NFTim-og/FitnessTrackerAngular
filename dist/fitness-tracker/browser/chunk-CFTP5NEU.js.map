{
  "version": 3,
  "sources": ["src/app/shared/services/api-test.service.ts", "src/app/components/api-test/api-test.component.ts"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable, catchError, map, of, tap } from 'rxjs';\nimport { environment } from '../../../environments/environment';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ApiTestService {\n  private apiUrl = environment.apiUrl;\n\n  constructor(private http: HttpClient) {}\n\n  /**\n   * Test the API health endpoint\n   */\n  testHealth(): Observable<boolean> {\n    console.log('Testing health endpoint:', `${this.apiUrl}/health`);\n    return this.http.get<any>(`${this.apiUrl}/health`)\n      .pipe(\n        map(response => {\n          console.log('API Health Response:', response);\n          return response.status === 'success';\n        }),\n        catchError(error => {\n          console.error('API Health Error:', error);\n          return of(false);\n        })\n      );\n  }\n\n  /**\n   * Test user registration\n   */\n  testRegistration(): Observable<boolean> {\n    const testUser = {\n      email: `test-${Date.now()}@example.com`,\n      password: 'password123'\n    };\n\n    return this.http.post<any>(`${this.apiUrl}/auth/register`, testUser)\n      .pipe(\n        map(response => {\n          console.log('API Registration Response:', response);\n          return response.status === 'success' && !!response.token;\n        }),\n        catchError(error => {\n          console.error('API Registration Error:', error);\n          return of(false);\n        })\n      );\n  }\n\n  /**\n   * Run all API tests\n   */\n  runAllTests(): Observable<{ [key: string]: boolean }> {\n    const results: { [key: string]: boolean } = {};\n\n    return this.testHealth().pipe(\n      tap(result => results['health'] = result),\n      tap(() => console.log('Health test result:', results['health'])),\n\n      // Chain the registration test\n      tap(() => {\n        if (results['health']) {\n          this.testRegistration().subscribe(result => {\n            results['registration'] = result;\n            console.log('Registration test result:', results['registration']);\n          });\n        }\n      }),\n\n      // Return all results\n      map(() => results)\n    );\n  }\n}\n", "import { Component, OnInit } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ApiTestService } from '../../shared/services/api-test.service';\n\n@Component({\n  selector: 'app-api-test',\n  standalone: true,\n  imports: [CommonModule],\n  template: `\n    <div class=\"container mt-5\">\n      <h2>API Integration Test</h2>\n\n      <div class=\"card mt-3\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">Test Results</h5>\n\n          <div class=\"mt-3\">\n            <h6>Health Endpoint:</h6>\n            <div *ngIf=\"testResults['health'] !== undefined\">\n              <span [class]=\"testResults['health'] ? 'text-success' : 'text-danger'\">\n                {{ testResults['health'] ? '✓ Success' : '✗ Failed' }}\n              </span>\n            </div>\n            <div *ngIf=\"testResults['health'] === undefined\">\n              <span class=\"text-secondary\">Not tested</span>\n            </div>\n          </div>\n\n          <div class=\"mt-3\">\n            <h6>User Registration:</h6>\n            <div *ngIf=\"testResults['registration'] !== undefined\">\n              <span [class]=\"testResults['registration'] ? 'text-success' : 'text-danger'\">\n                {{ testResults['registration'] ? '✓ Success' : '✗ Failed' }}\n              </span>\n            </div>\n            <div *ngIf=\"testResults['registration'] === undefined\">\n              <span class=\"text-secondary\">Not tested</span>\n            </div>\n          </div>\n\n          <div class=\"mt-4\">\n            <button class=\"btn btn-primary\" (click)=\"runTests()\" [disabled]=\"isRunningTests\">\n              {{ isRunningTests ? 'Running Tests...' : 'Run Tests' }}\n            </button>\n          </div>\n        </div>\n      </div>\n\n      <div class=\"mt-4\">\n        <p>\n          <strong>Note:</strong> Make sure the backend server is running on\n          <code>http://localhost:3000</code> before running these tests.\n        </p>\n        <div>\n          <strong>Backend Setup:</strong>\n          <ol>\n            <li>Navigate to the backend directory: <code>cd backend</code></li>\n            <li>Install dependencies: <code>npm install</code></li>\n            <li>Start the server: <code>npm run dev</code></li>\n          </ol>\n        </div>\n      </div>\n    </div>\n  `,\n  styles: [`\n    .container {\n      max-width: 800px;\n    }\n  `]\n})\nexport class ApiTestComponent implements OnInit {\n  testResults: { [key: string]: boolean } = {};\n  isRunningTests = false;\n\n  constructor(private apiTestService: ApiTestService) {}\n\n  ngOnInit(): void {\n    console.log('ApiTestComponent - Initializing');\n  }\n\n  runTests(): void {\n    console.log('ApiTestComponent - Running tests');\n    this.isRunningTests = true;\n    this.testResults = {};\n\n    this.apiTestService.runAllTests().subscribe({\n      next: (results) => {\n        console.log('ApiTestComponent - Test results:', results);\n        this.testResults = results;\n        this.isRunningTests = false;\n      },\n      error: (error) => {\n        console.error('ApiTestComponent - Error running tests:', error);\n        this.isRunningTests = false;\n      }\n    });\n  }\n}\n"],
  "mappings": "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",
  "names": []
}
