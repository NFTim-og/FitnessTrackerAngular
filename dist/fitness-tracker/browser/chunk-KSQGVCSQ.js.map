{
  "version": 3,
  "sources": ["src/app/shared/services/validation.service.ts", "src/app/shared/components/form-field/form-field.component.ts", "src/app/pages/exercises/exercise-form/exercise-form.component.ts", "src/app/pages/exercises/exercise-form/exercise-form.component.html"],
  "sourcesContent": ["import { Injectable } from '@angular/core';\nimport { AbstractControl, ValidationErrors, ValidatorFn } from '@angular/forms';\n\n/**\n * Validation Service\n * Provides custom validators and validation utilities for forms\n */\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidationService {\n\n  /**\n   * Email validation pattern\n   */\n  static readonly EMAIL_PATTERN = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\n\n  /**\n   * Password validation pattern (at least 8 chars, 1 uppercase, 1 lowercase, 1 number)\n   */\n  static readonly PASSWORD_PATTERN = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)[a-zA-Z\\d@$!%*?&]{8,}$/;\n\n  /**\n   * Validate email format\n   */\n  static emailValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null; // Don't validate empty values (use required validator for that)\n      }\n      \n      const valid = ValidationService.EMAIL_PATTERN.test(control.value);\n      return valid ? null : { email: { value: control.value } };\n    };\n  }\n\n  /**\n   * Validate password strength\n   */\n  static passwordValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const value = control.value;\n      const errors: any = {};\n\n      if (value.length < 8) {\n        errors.minLength = { requiredLength: 8, actualLength: value.length };\n      }\n\n      if (!/[a-z]/.test(value)) {\n        errors.lowercase = true;\n      }\n\n      if (!/[A-Z]/.test(value)) {\n        errors.uppercase = true;\n      }\n\n      if (!/\\d/.test(value)) {\n        errors.number = true;\n      }\n\n      return Object.keys(errors).length ? { password: errors } : null;\n    };\n  }\n\n  /**\n   * Validate that passwords match\n   */\n  static passwordMatchValidator(passwordField: string, confirmPasswordField: string): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      const password = control.get(passwordField);\n      const confirmPassword = control.get(confirmPasswordField);\n\n      if (!password || !confirmPassword) {\n        return null;\n      }\n\n      if (password.value !== confirmPassword.value) {\n        confirmPassword.setErrors({ passwordMismatch: true });\n        return { passwordMismatch: true };\n      } else {\n        // Clear the error if passwords match\n        const errors = confirmPassword.errors;\n        if (errors) {\n          delete errors['passwordMismatch'];\n          confirmPassword.setErrors(Object.keys(errors).length ? errors : null);\n        }\n        return null;\n      }\n    };\n  }\n\n  /**\n   * Validate positive number\n   */\n  static positiveNumberValidator(): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const value = parseFloat(control.value);\n      return value > 0 ? null : { positiveNumber: { value: control.value } };\n    };\n  }\n\n  /**\n   * Validate number range\n   */\n  static rangeValidator(min: number, max: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const value = parseFloat(control.value);\n      if (isNaN(value)) {\n        return { range: { value: control.value, min, max } };\n      }\n\n      if (value < min || value > max) {\n        return { range: { value, min, max } };\n      }\n\n      return null;\n    };\n  }\n\n  /**\n   * Validate minimum length for strings\n   */\n  static minLengthValidator(minLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const value = control.value.toString();\n      return value.length >= minLength ? null : { \n        minLength: { requiredLength: minLength, actualLength: value.length } \n      };\n    };\n  }\n\n  /**\n   * Validate maximum length for strings\n   */\n  static maxLengthValidator(maxLength: number): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const value = control.value.toString();\n      return value.length <= maxLength ? null : { \n        maxLength: { requiredLength: maxLength, actualLength: value.length } \n      };\n    };\n  }\n\n  /**\n   * Validate that a value is one of the allowed options\n   */\n  static optionsValidator(allowedOptions: string[]): ValidatorFn {\n    return (control: AbstractControl): ValidationErrors | null => {\n      if (!control.value) {\n        return null;\n      }\n\n      const valid = allowedOptions.includes(control.value);\n      return valid ? null : { options: { value: control.value, allowedOptions } };\n    };\n  }\n\n  /**\n   * Get user-friendly error message for validation errors\n   */\n  static getErrorMessage(fieldName: string, errors: ValidationErrors): string {\n    if (errors['required']) {\n      return `${fieldName} is required`;\n    }\n\n    if (errors['email']) {\n      return 'Please enter a valid email address';\n    }\n\n    if (errors['password']) {\n      const passwordErrors = errors['password'];\n      const messages = [];\n      \n      if (passwordErrors.minLength) {\n        messages.push(`at least ${passwordErrors.minLength.requiredLength} characters`);\n      }\n      if (passwordErrors.lowercase) {\n        messages.push('one lowercase letter');\n      }\n      if (passwordErrors.uppercase) {\n        messages.push('one uppercase letter');\n      }\n      if (passwordErrors.number) {\n        messages.push('one number');\n      }\n      \n      return `Password must contain ${messages.join(', ')}`;\n    }\n\n    if (errors['passwordMismatch']) {\n      return 'Passwords do not match';\n    }\n\n    if (errors['positiveNumber']) {\n      return `${fieldName} must be a positive number`;\n    }\n\n    if (errors['range']) {\n      const { min, max } = errors['range'];\n      return `${fieldName} must be between ${min} and ${max}`;\n    }\n\n    if (errors['minLength']) {\n      const { requiredLength } = errors['minLength'];\n      return `${fieldName} must be at least ${requiredLength} characters long`;\n    }\n\n    if (errors['maxLength']) {\n      const { requiredLength } = errors['maxLength'];\n      return `${fieldName} must be no more than ${requiredLength} characters long`;\n    }\n\n    if (errors['options']) {\n      const { allowedOptions } = errors['options'];\n      return `${fieldName} must be one of: ${allowedOptions.join(', ')}`;\n    }\n\n    // Generic error message\n    return `${fieldName} is invalid`;\n  }\n\n  /**\n   * Check if a form control has a specific error\n   */\n  static hasError(control: AbstractControl | null, errorType: string): boolean {\n    return !!(control && control.errors && control.errors[errorType] && control.touched);\n  }\n\n  /**\n   * Get the first error message for a form control\n   */\n  static getFirstErrorMessage(fieldName: string, control: AbstractControl | null): string | null {\n    if (!control || !control.errors || !control.touched) {\n      return null;\n    }\n\n    return ValidationService.getErrorMessage(fieldName, control.errors);\n  }\n}\n", "import { Component, Input, forwardRef } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { ControlValueAccessor, NG_VALUE_ACCESSOR, AbstractControl } from '@angular/forms';\nimport { ValidationService } from '../../services/validation.service';\n\nexport type InputType = 'text' | 'email' | 'password' | 'number' | 'tel' | 'url' | 'search';\n\n@Component({\n  selector: 'app-form-field',\n  standalone: true,\n  imports: [CommonModule],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => FormFieldComponent),\n      multi: true\n    }\n  ],\n  template: `\n    <div class=\"form-field\">\n      <label \n        *ngIf=\"label\" \n        [for]=\"fieldId\" \n        class=\"block text-sm font-medium text-gray-700 mb-1\"\n        [class.text-red-700]=\"hasError\"\n      >\n        {{ label }}\n        <span *ngIf=\"required\" class=\"text-red-500 ml-1\">*</span>\n      </label>\n      \n      <div class=\"relative\">\n        <input\n          [id]=\"fieldId\"\n          [type]=\"type\"\n          [placeholder]=\"placeholder\"\n          [disabled]=\"disabled\"\n          [readonly]=\"readonly\"\n          [value]=\"value\"\n          (input)=\"onInput($event)\"\n          (blur)=\"onBlur()\"\n          (focus)=\"onFocus()\"\n          class=\"block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-0 sm:text-sm transition-colors\"\n          [class]=\"inputClasses\"\n          [attr.aria-describedby]=\"hasError ? fieldId + '-error' : null\"\n          [attr.aria-invalid]=\"hasError\"\n        />\n        \n        <!-- Loading spinner -->\n        <div \n          *ngIf=\"loading\" \n          class=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n        >\n          <div class=\"animate-spin h-4 w-4 border-2 border-gray-300 border-t-blue-600 rounded-full\"></div>\n        </div>\n        \n        <!-- Success icon -->\n        <div \n          *ngIf=\"showSuccess && !hasError && value && !loading\" \n          class=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n        >\n          <svg class=\"h-4 w-4 text-green-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z\" clip-rule=\"evenodd\"/>\n          </svg>\n        </div>\n        \n        <!-- Error icon -->\n        <div \n          *ngIf=\"hasError\" \n          class=\"absolute inset-y-0 right-0 flex items-center pr-3\"\n        >\n          <svg class=\"h-4 w-4 text-red-500\" fill=\"currentColor\" viewBox=\"0 0 20 20\">\n            <path fill-rule=\"evenodd\" d=\"M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v4a1 1 0 102 0V6a1 1 0 00-1-1z\" clip-rule=\"evenodd\"/>\n          </svg>\n        </div>\n      </div>\n      \n      <!-- Help text -->\n      <p \n        *ngIf=\"helpText && !hasError\" \n        class=\"mt-1 text-sm text-gray-500\"\n      >\n        {{ helpText }}\n      </p>\n      \n      <!-- Error message -->\n      <p \n        *ngIf=\"hasError\" \n        [id]=\"fieldId + '-error'\"\n        class=\"mt-1 text-sm text-red-600\"\n        role=\"alert\"\n      >\n        {{ errorMessage }}\n      </p>\n    </div>\n  `,\n  styles: [`\n    .form-field {\n      margin-bottom: 1rem;\n    }\n    \n    .animate-spin {\n      animation: spin 1s linear infinite;\n    }\n    \n    @keyframes spin {\n      from {\n        transform: rotate(0deg);\n      }\n      to {\n        transform: rotate(360deg);\n      }\n    }\n  `]\n})\nexport class FormFieldComponent implements ControlValueAccessor {\n  @Input() label?: string;\n  @Input() placeholder?: string;\n  @Input() type: InputType = 'text';\n  @Input() required: boolean = false;\n  @Input() disabled: boolean = false;\n  @Input() readonly: boolean = false;\n  @Input() loading: boolean = false;\n  @Input() showSuccess: boolean = true;\n  @Input() helpText?: string;\n  @Input() control?: AbstractControl | null;\n  @Input() fieldName?: string;\n\n  value: string = '';\n  private onChange = (value: string) => {};\n  private onTouched = () => {};\n\n  // Generate unique field ID\n  fieldId = `field-${Math.random().toString(36).substr(2, 9)}`;\n\n  get hasError(): boolean {\n    return !!(this.control && this.control.errors && this.control.touched);\n  }\n\n  get errorMessage(): string | null {\n    if (!this.hasError || !this.control || !this.fieldName) {\n      return null;\n    }\n    \n    return ValidationService.getFirstErrorMessage(this.fieldName, this.control);\n  }\n\n  get inputClasses(): string {\n    const baseClasses = 'block w-full px-3 py-2 border rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-0 sm:text-sm transition-colors';\n    \n    if (this.hasError) {\n      return `${baseClasses} border-red-300 text-red-900 placeholder-red-300 focus:ring-red-500 focus:border-red-500`;\n    }\n    \n    if (this.showSuccess && this.value && !this.loading && this.control?.valid) {\n      return `${baseClasses} border-green-300 text-green-900 focus:ring-green-500 focus:border-green-500`;\n    }\n    \n    if (this.disabled) {\n      return `${baseClasses} border-gray-300 bg-gray-50 text-gray-500 cursor-not-allowed`;\n    }\n    \n    return `${baseClasses} border-gray-300 focus:ring-blue-500 focus:border-blue-500`;\n  }\n\n  // ControlValueAccessor implementation\n  writeValue(value: any): void {\n    this.value = value || '';\n  }\n\n  registerOnChange(fn: (value: string) => void): void {\n    this.onChange = fn;\n  }\n\n  registerOnTouched(fn: () => void): void {\n    this.onTouched = fn;\n  }\n\n  setDisabledState(isDisabled: boolean): void {\n    this.disabled = isDisabled;\n  }\n\n  // Event handlers\n  onInput(event: Event): void {\n    const target = event.target as HTMLInputElement;\n    this.value = target.value;\n    this.onChange(this.value);\n  }\n\n  onBlur(): void {\n    this.onTouched();\n  }\n\n  onFocus(): void {\n    // Optional: Handle focus events\n  }\n}\n", "import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { AppError } from '../../../shared/models/error.model';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { ExerciseService } from '../../../services/exercise.service';\nimport { UserProfileService } from '../../../services/user-profile.service';\nimport { Exercise } from '../../../models/exercise.model';\nimport { Subscription } from 'rxjs';\nimport { ValidationService } from '../../../shared/services/validation.service';\nimport { LoadingService } from '../../../shared/services/loading.service';\nimport { FormFieldComponent } from '../../../shared/components/form-field/form-field.component';\nimport { LoadingSpinnerComponent } from '../../../shared/components/loading-spinner/loading-spinner.component';\n\n@Component({\n  selector: 'app-exercise-form',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, FormFieldComponent, LoadingSpinnerComponent],\n  templateUrl: './exercise-form.component.html',\n  styles: []\n})\nexport class ExerciseFormComponent implements OnInit, OnDestroy {\n  exerciseForm: FormGroup;\n  isEditing = false;\n  isSubmitting = false;\n  error: string | null = null;\n  showMetInfo = false;\n  estimatedCalories = 0;\n  private profileSubscription: Subscription;\n  private formSubscription: Subscription;\n\n  // Loading states\n  isLoadingExercise$ = this.loadingService.isLoading('loadExercise');\n  isSavingExercise$ = this.loadingService.isLoading('saveExercise');\n\n  constructor(\n    private fb: FormBuilder,\n    private exerciseService: ExerciseService,\n    private userProfileService: UserProfileService,\n    private router: Router,\n    private route: ActivatedRoute,\n    private loadingService: LoadingService\n  ) {\n    this.exerciseForm = this.fb.group({\n      name: ['', [\n        Validators.required,\n        ValidationService.minLengthValidator(2),\n        ValidationService.maxLengthValidator(100)\n      ]],\n      duration: ['', [\n        Validators.required,\n        ValidationService.positiveNumberValidator(),\n        ValidationService.rangeValidator(1, 300)\n      ]],\n      met_value: [4.0, [\n        Validators.required,\n        ValidationService.positiveNumberValidator(),\n        ValidationService.rangeValidator(0.1, 20)\n      ]],\n      difficulty: ['', [\n        Validators.required,\n        ValidationService.optionsValidator(['easy', 'medium', 'hard'])\n      ]]\n    });\n\n    // Subscribe to profile changes to update calories when weight changes\n    this.profileSubscription = this.userProfileService.profile$.subscribe(() => {\n      this.updateCalories();\n    });\n\n    this.formSubscription = this.exerciseForm.valueChanges.subscribe(() => {\n      this.updateCalories();\n    });\n  }\n\n  ngOnInit() {\n    const exerciseId = this.route.snapshot.params['id'];\n    if (exerciseId) {\n      this.isEditing = true;\n      this.loadExercise(exerciseId);\n    } else {\n    this.updateCalories();\n    }\n  }\n\n  ngOnDestroy() {\n    if (this.profileSubscription) {\n      this.profileSubscription.unsubscribe();\n    }\n  }\n\n  loadExercise(id: string) {\n    this.loadingService.start('loadExercise');\n\n    this.exerciseService.getExercise(id).subscribe({\n      next: (exercise) => {\n        if (exercise) {\n          this.exerciseForm.patchValue(exercise);\n          this.updateCalories();\n          this.error = null;\n        }\n        this.loadingService.stop('loadExercise');\n      },\n      error: (error) => {\n        this.error = error instanceof AppError ? error.message : 'Failed to load exercise';\n        this.loadingService.stop('loadExercise');\n      }\n    });\n  }\n\n  showError(field: string) {\n    const control = this.exerciseForm.get(field);\n    return control?.invalid && (control?.dirty || control?.touched);\n  }\n\n  getFieldError(fieldName: string): string | null {\n    const control = this.exerciseForm.get(fieldName);\n    return ValidationService.getFirstErrorMessage(fieldName, control);\n  }\n\n  getFormControl(fieldName: string) {\n    return this.exerciseForm.get(fieldName);\n  }\n\n  updateCalories() {\n    const duration = this.exerciseForm.get('duration')?.value;\n    const metValue = this.exerciseForm.get('met_value')?.value;\n\n    // Make sure we call calculateCalories even with default values\n    if (duration && metValue) {\n      this.estimatedCalories = this.userProfileService.calculateCalories(metValue, duration);\n    } else if (metValue) {\n      // Force a call with at least the MET value\n      this.estimatedCalories = this.userProfileService.calculateCalories(metValue, 0);\n    } else {\n      this.estimatedCalories = 0;\n    }\n  }\n\n  async onSubmit() {\n    if (this.exerciseForm.invalid) {\n      // Mark all fields as touched to show validation errors\n      this.exerciseForm.markAllAsTouched();\n      return;\n    }\n\n    console.log('ExerciseFormComponent - Form submitted');\n    console.log('ExerciseFormComponent - Form values:', this.exerciseForm.value);\n\n    this.loadingService.start('saveExercise');\n    this.isSubmitting = true;\n    try {\n      this.updateCalories();\n\n      const formValues = this.exerciseForm.value;\n      const exercise = new Exercise({\n        name: formValues.name,\n        duration: Number(formValues.duration),\n        met_value: Number(formValues.met_value),\n        difficulty: formValues.difficulty,\n        calories: this.estimatedCalories\n      });\n\n      console.log('ExerciseFormComponent - Exercise object:', exercise);\n\n      if (this.isEditing) {\n        const exerciseId = this.route.snapshot.params['id'];\n        console.log('ExerciseFormComponent - Updating exercise with ID:', exerciseId);\n        const updateData = {\n          name: exercise.name,\n          duration: exercise.duration,\n          met_value: exercise.met_value,\n          difficulty: exercise.difficulty,\n          calories: exercise.calories\n        };\n        await this.exerciseService.updateExercise(exerciseId, updateData);\n        console.log('ExerciseFormComponent - Exercise updated successfully');\n      } else {\n        console.log('ExerciseFormComponent - Creating new exercise');\n        await this.exerciseService.createExercise(exercise);\n        console.log('ExerciseFormComponent - Exercise created successfully');\n      }\n      this.router.navigate(['/exercises']);\n      this.error = null;\n    } catch (error) {\n      console.error('ExerciseFormComponent - Error saving exercise:', error);\n      this.error = error instanceof AppError ? error.message : 'Failed to save exercise';\n    } finally {\n      this.isSubmitting = false;\n      this.loadingService.stop('saveExercise');\n    }\n  }\n\n  goBack() {\n    this.router.navigate(['/exercises']);\n  }\n}", "<div class=\"max-w-lg mx-auto\">\n    @if (error) {\n      <div class=\"alert alert-error mb-4\">\n        {{ error }}\n        <button class=\"ml-2\" (click)=\"error = null\">&times;</button>\n      </div>\n    }\n\n    <h1 class=\"text-3xl font-bold mb-6\">\n      @if (isLoadingExercise$ | async) {\n        <div class=\"flex items-center\">\n          <app-loading-spinner size=\"small\" class=\"mr-2\"></app-loading-spinner>\n          Loading Exercise...\n        </div>\n      } @else {\n        {{ isEditing ? 'Edit' : 'New' }} Exercise\n      }\n    </h1>\n\n    <form [formGroup]=\"exerciseForm\" (ngSubmit)=\"onSubmit()\" class=\"card\">\n      <app-form-field\n        label=\"Exercise Name\"\n        type=\"text\"\n        placeholder=\"Enter exercise name\"\n        [control]=\"getFormControl('name')\"\n        fieldName=\"Name\"\n        [required]=\"true\"\n        helpText=\"Enter a descriptive name for your exercise (2-100 characters)\"\n        formControlName=\"name\">\n      </app-form-field>\n\n      <app-form-field\n        label=\"Duration (minutes)\"\n        type=\"number\"\n        placeholder=\"Enter duration in minutes\"\n        [control]=\"getFormControl('duration')\"\n        fieldName=\"Duration\"\n        [required]=\"true\"\n        helpText=\"Exercise duration between 1-300 minutes\"\n        formControlName=\"duration\">\n      </app-form-field>\n\n      <div class=\"form-group\">\n        <label class=\"form-label\">\n          MET Value\n          <span\n            class=\"ml-2 text-sm text-blue-600 cursor-pointer\"\n            (click)=\"showMetInfo = !showMetInfo\"\n          >\n            ℹ️ What's this?\n          </span>\n        </label>\n        <app-form-field\n          type=\"number\"\n          placeholder=\"Enter MET value (e.g., 4.0)\"\n          [control]=\"getFormControl('met_value')\"\n          fieldName=\"MET Value\"\n          [required]=\"true\"\n          helpText=\"Metabolic Equivalent of Task (0.1-20.0)\"\n          formControlName=\"met_value\">\n        </app-form-field>\n      </div>\n\n      @if (showMetInfo) {\n        <div class=\"bg-blue-50 p-4 rounded-lg mb-4\">\n          <h3 class=\"font-semibold mb-2\">About MET Values</h3>\n          <p class=\"mb-2\">\n            MET (Metabolic Equivalent of Task) represents the energy cost of physical activities.\n            Common values:\n          </p>\n          <ul class=\"list-disc list-inside mb-2\">\n            <li>Light activity (walking slowly): 2-3 METs</li>\n            <li>Moderate activity (brisk walking): 3-6 METs</li>\n            <li>Vigorous activity (running): 6+ METs</li>\n          </ul>\n          <p>\n            Your calories burned will be calculated based on your weight and the MET value.\n          </p>\n        </div>\n      }\n\n      <div class=\"form-group\">\n        <label class=\"form-label\">Difficulty</label>\n        <div class=\"flex gap-4\">\n          <label class=\"flex items-center\">\n            <input\n              type=\"radio\"\n              formControlName=\"difficulty\"\n              value=\"easy\"\n              class=\"mr-2\"\n            />\n            Easy\n          </label>\n          <label class=\"flex items-center\">\n            <input\n              type=\"radio\"\n              formControlName=\"difficulty\"\n              value=\"medium\"\n              class=\"mr-2\"\n            />\n            Medium\n          </label>\n          <label class=\"flex items-center\">\n            <input\n              type=\"radio\"\n              formControlName=\"difficulty\"\n              value=\"hard\"\n              class=\"mr-2\"\n            />\n            Hard\n          </label>\n        </div>\n        @if (showError('difficulty')) {\n          <p class=\"text-red-500 text-sm mt-1\">{{ getFieldError('Difficulty') }}</p>\n        }\n      </div>\n\n      @if (estimatedCalories > 0) {\n        <div class=\"bg-green-50 p-4 rounded-lg mb-4\">\n          <p class=\"font-semibold\">\n            Estimated Calories: {{ estimatedCalories }} kcal\n          </p>\n          <p class=\"text-sm text-gray-600\">\n            Based on your current weight and the exercise parameters\n          </p>\n        </div>\n      }\n\n      <div class=\"flex gap-4 mt-6\">\n        <button\n          type=\"submit\"\n          class=\"btn btn-primary\"\n          [disabled]=\"exerciseForm.invalid || (isSavingExercise$ | async)\"\n        >\n          @if (isSavingExercise$ | async) {\n            <app-loading-spinner size=\"small\" color=\"white\" class=\"mr-2\"></app-loading-spinner>\n            Saving...\n          } @else {\n            {{ isEditing ? 'Update' : 'Create' }} Exercise\n          }\n        </button>\n        <button\n          type=\"button\"\n          class=\"btn btn-secondary\"\n          (click)=\"goBack()\"\n          [disabled]=\"isSavingExercise$ | async\"\n        >\n          Cancel\n        </button>\n      </div>\n    </form>\n  </div>"],
  "mappings": "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",
  "names": []
}
