{
  "version": 3,
  "sources": ["src/app/shared/models/error.model.ts", "src/app/shared/services/error-handler.service.ts"],
  "sourcesContent": ["export enum ErrorSeverity {\n  LOW = 'low',\n  MEDIUM = 'medium',\n  HIGH = 'high',\n  CRITICAL = 'critical'\n}\n\nexport enum ErrorCategory {\n  NETWORK = 'network',\n  AUTHENTICATION = 'authentication',\n  AUTHORIZATION = 'authorization',\n  VALIDATION = 'validation',\n  SERVER = 'server',\n  CLIENT = 'client',\n  UNKNOWN = 'unknown'\n}\n\nexport class AppError extends Error {\n  public readonly timestamp: Date;\n  public readonly severity: ErrorSeverity;\n  public readonly category: ErrorCategory;\n\n  constructor(\n    message: string,\n    public code?: string,\n    public details?: any,\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM,\n    category: ErrorCategory = ErrorCategory.UNKNOWN\n  ) {\n    super(message);\n    this.name = 'AppError';\n    this.timestamp = new Date();\n    this.severity = severity;\n    this.category = category;\n  }\n\n  static fromError(error: any): AppError {\n    if (error instanceof AppError) {\n      return error;\n    }\n\n    // Handle Angular HttpErrorResponse\n    if (error?.name === 'HttpErrorResponse') {\n      return AppError.fromHttpError(error);\n    }\n\n    // Handle Express API errors\n    if (error?.error?.statusCode && error?.error?.message) {\n      return new AppError(\n        error.error.message,\n        `API_ERROR_${error.error.statusCode}`,\n        error.error.stack,\n        AppError.getSeverityFromStatus(error.error.statusCode),\n        AppError.getCategoryFromStatus(error.error.statusCode)\n      );\n    }\n\n    // Handle HTTP errors\n    if (error?.status && error?.statusText) {\n      return AppError.fromHttpError(error);\n    }\n\n    // Handle validation errors\n    if (error?.name === 'ValidationError' || error?.code === 'VALIDATION_ERROR') {\n      return new AppError(\n        error.message || 'Validation failed',\n        'VALIDATION_ERROR',\n        error.details,\n        ErrorSeverity.LOW,\n        ErrorCategory.VALIDATION\n      );\n    }\n\n    // Handle network errors\n    if (error?.name === 'NetworkError' || error?.message?.includes('network')) {\n      return new AppError(\n        'Network connection error',\n        'NETWORK_ERROR',\n        error,\n        ErrorSeverity.HIGH,\n        ErrorCategory.NETWORK\n      );\n    }\n\n    // Handle legacy Supabase errors\n    if (error?.code && error?.message) {\n      return new AppError(\n        error.message,\n        error.code,\n        error.details,\n        ErrorSeverity.MEDIUM,\n        ErrorCategory.UNKNOWN\n      );\n    }\n\n    // Handle generic errors\n    return new AppError(\n      error?.message || 'An unexpected error occurred',\n      'UNKNOWN_ERROR',\n      error,\n      ErrorSeverity.MEDIUM,\n      ErrorCategory.UNKNOWN\n    );\n  }\n\n  private static fromHttpError(error: any): AppError {\n    const status = error.status || 0;\n    const message = AppError.getMessageFromStatus(status, error);\n    const code = `HTTP_ERROR_${status}`;\n    const severity = AppError.getSeverityFromStatus(status);\n    const category = AppError.getCategoryFromStatus(status);\n\n    return new AppError(message, code, error.error, severity, category);\n  }\n\n  private static getMessageFromStatus(status: number, error: any): string {\n    const statusMessages: { [key: number]: string } = {\n      0: 'Network connection error',\n      400: 'Bad request - please check your input',\n      401: 'Authentication required',\n      403: 'Access denied',\n      404: 'Resource not found',\n      409: 'Conflict - resource already exists',\n      422: 'Validation error',\n      429: 'Too many requests - please try again later',\n      500: 'Internal server error',\n      502: 'Service temporarily unavailable',\n      503: 'Service unavailable',\n      504: 'Request timeout'\n    };\n\n    return statusMessages[status] || error?.statusText || `HTTP Error ${status}`;\n  }\n\n  private static getSeverityFromStatus(status: number): ErrorSeverity {\n    if (status >= 500) return ErrorSeverity.CRITICAL;\n    if (status >= 400 && status < 500) return ErrorSeverity.HIGH;\n    if (status >= 300) return ErrorSeverity.MEDIUM;\n    return ErrorSeverity.LOW;\n  }\n\n  private static getCategoryFromStatus(status: number): ErrorCategory {\n    if (status === 0) return ErrorCategory.NETWORK;\n    if (status === 401) return ErrorCategory.AUTHENTICATION;\n    if (status === 403) return ErrorCategory.AUTHORIZATION;\n    if (status === 400 || status === 422) return ErrorCategory.VALIDATION;\n    if (status >= 500) return ErrorCategory.SERVER;\n    if (status >= 400) return ErrorCategory.CLIENT;\n    return ErrorCategory.UNKNOWN;\n  }\n\n  /**\n   * Check if this error should be retryable\n   */\n  isRetryable(): boolean {\n    const retryableCodes = ['NETWORK_ERROR', 'HTTP_ERROR_500', 'HTTP_ERROR_502', 'HTTP_ERROR_503', 'HTTP_ERROR_504'];\n    return retryableCodes.includes(this.code || '');\n  }\n\n  /**\n   * Get a user-friendly description of the error\n   */\n  getUserDescription(): string {\n    switch (this.category) {\n      case ErrorCategory.NETWORK:\n        return 'Please check your internet connection and try again.';\n      case ErrorCategory.AUTHENTICATION:\n        return 'Please log in to continue.';\n      case ErrorCategory.AUTHORIZATION:\n        return 'You do not have permission to perform this action.';\n      case ErrorCategory.VALIDATION:\n        return 'Please check your input and try again.';\n      case ErrorCategory.SERVER:\n        return 'Server error. Please try again later.';\n      default:\n        return 'An unexpected error occurred. Please try again.';\n    }\n  }\n}", "import { Injectable } from '@angular/core';\nimport { BehaviorSubject, Observable } from 'rxjs';\nimport { AppError } from '../models/error.model';\n\nexport interface ErrorNotification {\n  id: string;\n  error: AppError;\n  context: string;\n  timestamp: Date;\n  dismissed: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ErrorHandlerService {\n  private errorsSubject = new BehaviorSubject<ErrorNotification[]>([]);\n  private errorIdCounter = 0;\n\n  // Observable stream of current errors\n  errors$ = this.errorsSubject.asObservable();\n\n  /**\n   * Handle an error and optionally show it to the user\n   * @param error - The error to handle\n   * @param context - Context where the error occurred\n   * @param showToUser - Whether to show this error to the user\n   * @returns The processed AppError\n   */\n  handleError(error: any, context: string, showToUser: boolean = false): AppError {\n    const appError = AppError.fromError(error);\n\n    // Log error with context\n    console.error(`Error in ${context}:`, {\n      message: appError.message,\n      code: appError.code,\n      details: appError.details,\n      stack: appError.stack\n    });\n\n    // Add to user-visible errors if requested\n    if (showToUser) {\n      this.addErrorNotification(appError, context);\n    }\n\n    return appError;\n  }\n\n  /**\n   * Add an error notification for the user\n   * @param error - The AppError to show\n   * @param context - Context where the error occurred\n   */\n  private addErrorNotification(error: AppError, context: string): void {\n    const notification: ErrorNotification = {\n      id: `error_${++this.errorIdCounter}`,\n      error,\n      context,\n      timestamp: new Date(),\n      dismissed: false\n    };\n\n    const currentErrors = this.errorsSubject.value;\n    this.errorsSubject.next([...currentErrors, notification]);\n\n    // Auto-dismiss after 10 seconds for non-critical errors\n    if (!this.isCriticalError(error)) {\n      setTimeout(() => {\n        this.dismissError(notification.id);\n      }, 10000);\n    }\n  }\n\n  /**\n   * Dismiss an error notification\n   * @param errorId - ID of the error to dismiss\n   */\n  dismissError(errorId: string): void {\n    const currentErrors = this.errorsSubject.value;\n    const updatedErrors = currentErrors.filter(error => error.id !== errorId);\n    this.errorsSubject.next(updatedErrors);\n  }\n\n  /**\n   * Clear all error notifications\n   */\n  clearAllErrors(): void {\n    this.errorsSubject.next([]);\n  }\n\n  /**\n   * Check if an error is critical and should not auto-dismiss\n   * @param error - The AppError to check\n   * @returns True if the error is critical\n   */\n  private isCriticalError(error: AppError): boolean {\n    const criticalCodes = [\n      'AUTHENTICATION_ERROR',\n      'AUTHORIZATION_ERROR',\n      'NETWORK_ERROR',\n      'SERVER_ERROR'\n    ];\n\n    return criticalCodes.some(code => error.code?.includes(code));\n  }\n\n  /**\n   * Get user-friendly error message\n   * @param error - The AppError\n   * @returns User-friendly message\n   */\n  getUserFriendlyMessage(error: AppError): string {\n    const messageMap: { [key: string]: string } = {\n      'HTTP_ERROR_401': 'Please log in to continue',\n      'HTTP_ERROR_403': 'You do not have permission to perform this action',\n      'HTTP_ERROR_404': 'The requested resource was not found',\n      'HTTP_ERROR_500': 'Server error. Please try again later',\n      'NETWORK_ERROR': 'Network connection error. Please check your internet connection',\n      'VALIDATION_ERROR': 'Please check your input and try again'\n    };\n\n    return messageMap[error.code || ''] || error.message || 'An unexpected error occurred';\n  }\n}"],
  "mappings": "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",
  "names": ["ErrorSeverity", "ErrorCategory"]
}
